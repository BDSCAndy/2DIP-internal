from tkinter import messagbox,ttk
root:title("login")
sum_1=0
order=[]
with open "account.txt" as file:
	print()
BDSC_MENU={4:{......}
	    3:{......}
	    2:{......}
	    1:{......}}
define frame0 function:
	set frame0 to red.
	root set geometry:210x100
	global frame_0
	frame_0:Frame
	frame_0:grid
	define age function:
	  try:
		age_num:int(get age_entry)
		if age_num>=13 and age_num<=18:
			run frame
		else:
		  messagebox:"Your age must be between 13-18"
	  execpt valueerror:
		messagebox:"Please entera number"
	 
	age_lbl=Label:"Please enter your age"
	age_lbl.grid()
	
	age_entry: Width=30
	age_entry.grid
	
	age_button:"Login",Command=age function
	
define frame_1 function:
	root.geo:530x190
	make global frame1
	frame1:Frame(root)
	set frame1 to red
	define add_acc function:
		ac_account:get entry_name
		password: get password
		if ac_account is empty or password  is empty:
			messagebox:"Please make an order"
			end function(return)
	define add_acc function:
		ac_account:get entry_name
		password: get password
		if ac_account is empty or password  is empty:
			messagebox:"Please make an order"
			end function(return)
		file=open("account.txt")
		file.write:{ac_account:password}
		messagebox:"Account name and password has  been added"
	define login function:
		ac_account:get entry_name
		password: get password
		if ac_account is empty or password  is empty:
			messagebox:"Please make an order"
			end function(return)
		with open("account.txt","r") as file:
			login_now=file.readlines()
		for i in login_now:
			account_login,ac_password=i.split(":") and strip()
			if account_login=account_account and ac_password=password:
				run frame_2() function
		else:
			messagebox:"Username or password is incorrect"
	define reset function
		found=False
		ac_account:get entry_name
		password: get password
		if ac_account is empty or password  is empty:
			messagebox:"Please make an order"
			end function(return)
		with open("account.txt","r") as file:
			login_now:file.readlines()
		for i in login_now:
			account_login,ac_password=i.split(":") and strip()
			if account_login=account_account and ac_password=password:
				clear txt file.
				found=True
		if found:
			messagebox:"Your password has been removed"
			return
		if not found:
			messagebox:"Username or password is incorrect"
			return
	welcome=Label:"Welcome to the BDSC Cafe app!"
	center label
	grid welcome

	lb1=Label:"Username:"
	grid lb1

	entry_name=Entry
	grid entry

	lblPass=Label:"Password"
	grid lblPass

	entryPass=Entry
	grid entryPass
	
	
	button1:"Add account",command=add_acc function
	grid button1

	button2:"Login",command: login function
	grid button2

	button3="Remove password",command= reset function
	grid button3

define frame_2 function:
	set root.geo:310x250
	frame2=Frame(root)
	set frame2 to red
	make frame2 global
	grid frame 2
	make root.title:"Menu"

	menu_lbl=label:"Select your order",font size=20
	center menu_lbl
	grid menu_lbl

	make drink;(command: Run frame_3),lunch;(command: Run frame_4),snacks;(command: Run frame_5),frozen(command run frame_6) image buttons
	center the buttons
	grid the buttons
define checkout_exit function:
	make pr_ice,sum_1 glbal
	pri_ce=""(empty)
	if sum_1>0:
		for i in order:
			pr_ice=pr_ice+1
		messagebox:display "{pri_ce} and sum_1"
		messagebox:"Please collect your order at school cafe"
	else:
		messagebox:"Please make an order"
		return(end function)
	set sum_1:0
	clear order list
	

define view_order function:
	global pr_ice=""
	pr_ice=""
	if sum_1>0:
		for i in order:
			pr_ice=pr_ice+1
	messagebox:display "{pri_ce} and sum_1"
	else:
		messagebox:"Please make an order"
		return(end function)
	
define cancel_order function:
    make sum_1 global
    clear order list
    if sum_1>0:
        set sum_1 to: 0
        messagebox.showerror:"Your order has been reset
    else:
        messagebox.showerror('Reset',"Please make an order")
define ad_ord function:      
        found=False
        make sum_1,order global
        for var, name, price, spinbox in zip(track_var, category_names, category_price, track_spinbox):
            if get var=1 
                    quantity=int(get spinbox)  
                    store in order list:"{categlory names},{categlory price} and {quantity}" 
                    sum_1=sum_1+price*quantity 
                    Uncheck the checkboxex(var)
                    clear spinbox.delete() 
                    set spinbox to 1. 
                    found=True
        if found:
            messagebox.showinfo('Menu','Your order has been added.')
        else:. 
            messagebox:'Please make an order'
        
define remove_order function:
        found=False
        global sum_1,order  
        for var, name, price, spinbox in zip(track_var, category_names, category_price, track_spinbox):
            quantity=int(get spinbox)  
            if get var= 1:
                remove "{categlory names},{categlory price} and {quantity}" from list
                sum_1=sum_1-price*quantity # add the total price to sum_1
                 Uncheck the checkboxex(var)
                 clear spinbox.delete() 
                 set spinbox to 1. 
                found=True
        if found==True:
            messagebox:'Your order has been removed.
        else:
            messagebox.showerror:'Please make an order'
define logout function:
	run cancel_order function
	run frame_1 function
	messagebox:"Your order has been reset."

define frame_3 function:	
    make list:track_var=[]
    make list: track_spinbox=[]
    set geometry:250x300
    make frame3 global
    Frame3=root Frame
    set frame3 to red
    grid frame3
    set root title: "Menu"
    
    category_names = list of drinks from bdsc menu
    category_price = list of drink price from bdsc_menu. 

    order label:"Drinks"
    grid order_lbl     
        
    for name,price in zip(category_names,category_price):
        check = IntVar()
        store checks into track_var list
        spinbox: set from 1-10.
        grid spinbox
        chk_item:"Display item and price" variable=check
        grid chk_item 
  	  store checkbox into track_spinbox list     
    add_order=Button:"Add to order",command=ad_ord
    grid add_order
    
    remove=Button:"Remove order",command=remove
    grid remove

    box4=text 
    grid box4

    lunch=button:"Lunch",command= frame_4 function
    grid lunch
	
    snacks=button:"Snacks",command frame_5
    grid snacks

    back=Button:"Back to menu"
    grid back. 

functions frame_4,frame_5,frame_6 is the same as frame_3
But:
	Frame_4 displays: list of Lunch,quick toggles are changed to drinks,snacks and  frozen 
	frame_5 displays list of Snacks,quick toggles are cahnged to lunch,drinks,frozen
	frame_6 displays list of frozen,quick toggles are changed to drinks,lunch,snacks

	
	
		
		 
		

